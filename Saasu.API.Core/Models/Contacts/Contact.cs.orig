using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Saasu.API.Core.Models.Contacts
{
	public class Contact : BaseModel
	{
        /// <summary>
        /// Contact Id/Key
        /// </summary>
		public int Id { get; set; }
        /// <summary>
        /// Date contact was created in UTC
        /// </summary>
        public Nullable<System.DateTime> CreatedDateUtc { get; set; }
        /// <summary>
        /// Date the contact was last modified in UTC
        /// </summary>
        public Nullable<System.DateTime> LastModifiedDateUtc { get; set; }
        /// <summary>
        /// Contact Salutation eg. Mr, Mrs, Dr etc.
        /// </summary>
        public string Salutation { get; set; }
        /// <summary>
        /// Contacts given name
        /// </summary>
        public string GivenName { get; set; }
        /// <summary>
        /// Contacts middle initials if any
        /// </summary>
        public string MiddleInitials { get; set; }
        /// <summary>
        /// Contacts family name
        /// </summary>
        public string FamilyName { get; set; }
        /// <summary>
        /// Is this contact current set to active
        /// </summary>
        public bool IsActive { get; set; }
        /// <summary>
        /// The Id/Key of the organisation that this contact belongs to (if any)
        /// </summary>
        public Nullable<int> OrganisationId { get; set; }
        /// <summary>
        /// The name of the organisation that this contact belongs to (if any)
        /// </summary>
        public string OrganisationName { get; set; }
        /// <summary>
        /// The ABN of the organisation that this contact belongs to (if any)
        /// </summary>
        public string OrganisationAbn { get; set; }
        /// <summary>
        /// The email of the organisation that this contact belongs to (if any)
        /// </summary>
        public string CompanyEmail { get; set; }
        /// <summary>
        /// The website of the organisation that this contact belongs to (if any)
        /// </summary>
        public string OrganisationWebsite { get; set; }
        /// <summary>
        /// The trading name of the organisation that this contact belongs to (if any)
        /// </summary>
        public string TradingName { get; set; }
        /// <summary>
        /// The long description of the organisation that this contact belongs to (if any)
        /// </summary>
        public string LongDescription { get; set; }
        /// <summary>
        /// The position that the contact holds within the organisation that this contact belongs to (if any)
        /// </summary>
        public string OrganisationPosition { get; set; }
        /// <summary>
        /// The street name and number in which the contact is located
        /// </summary>
        public string Street { get; set; }
        /// <summary>
        /// City in which the contact is located
        /// </summary>
        public string City { get; set; }
        /// <summary>
        /// The state in which the contact is located
        /// </summary>
        public string State { get; set; }
        /// <summary>
        /// The postcode in which the contact is located
        /// </summary>
        public string PostCode { get; set; }
        /// <summary>
        /// The Id of the country in which the contact is located
        /// </summary>
        public Nullable<int> CountryId { get; set; }
        /// <summary>
        /// The url of the website of the contact
        /// </summary>
        public string WebsiteUrl { get; set; }
        /// <summary>
        /// The contacts primary phone number
        /// </summary>
        public string PrimaryPhone { get; set; }
        /// <summary>
        /// The contacts home phone number
        /// </summary>
        public string HomePhone { get; set; }
        /// <summary>
        /// The contacts alternate or other phone number
        /// </summary>
        public string OtherPhone { get; set; }
        /// <summary>
        /// The contacts mobile phone number
        /// </summary>
        public string MobilePhone { get; set; }
        /// <summary>
        /// The contacts fax number
        /// </summary>
        public string Fax { get; set; }
        /// <summary>
        /// The contacts email address
        /// </summary>
        public string EmailAddress { get; set; }
        /// <summary>
        /// The contacts user defined custom Id. This is a custom field that can be used for custom identification purposes
        /// </summary>
        public string ContactId { get; set; }
        /// <summary>
        /// The Id/key of the contacts manager (if any)
        /// </summary>
        public Nullable<int> ContactManagerId { get; set; }
        /// <summary>
        /// Indicates if the contact accepts cheques
        /// </summary>
        public Nullable<bool> AcceptCheque { get; set; }
        /// <summary>
        /// Indicates who the cheque is payable to if the contact accepts a cheque
        /// </summary>
        public string ChequePayableTo { get; set; }
        /// <summary>
        /// Indicates if the contact accepts direct deposits
        /// </summary>
        public Nullable<bool> AcceptDirectDeposit { get; set; }
        /// <summary>
        /// The account name to use for direct deposits if the contact accepts direct deposits
        /// </summary>
        public string DirectDepositAccountName { get; set; }
        /// <summary>
        /// The BSB to use for direct deposits if the contact accepts direct deposits
        /// </summary>
        public string DirectDepositAccountBSB { get; set; }
        /// <summary>
        /// The account number to use for direct deposits if the contact accepts direct deposits
        /// </summary>
        public string DirectDepositAccountNumber { get; set; }
        /// <summary>
        /// Alternate or other street number and name
        /// </summary>
        public string OtherStreet { get; set; }
        /// <summary>
        /// Alternate or other city
        /// </summary>
        public string OtherCity { get; set; }
        /// <summary>
        /// Alternate or other street postcode
        /// </summary>
        public string OtherPostcode { get; set; }
        /// <summary>
        /// Alternate or other state
        /// </summary>
        public string OtherState { get; set; }
        /// <summary>
        /// Alternate or other Id of the country
        /// </summary>
        public Nullable<int> OtherCountryId { get; set; }
        /// <summary>
        /// A custom field that can be used for any purpose to store data relevant to the user and contact
        /// </summary>
        public string CustomField1 { get; set; }
        /// <summary>
        /// A second custom field that can be used for any purpose to store data relevant to the user and contact
        /// </summary>
        public string CustomField2 { get; set; }
        /// <summary>
        /// The contacts twitter id/handle
        /// </summary>
        public string TwitterId { get; set; }
        /// <summary>
        /// The contacts skype id/handle
        /// </summary>
        public string SkypeId { get; set; }
        /// <summary>
        /// A link to the contacts linkedIn profile
        /// </summary>
        public string LinkedInProfile { get; set; }
        /// <summary>
        /// Indicates whether the contact gets statements automatically sent to them
        /// </summary>
        public bool AutoSendStatement { get; set; }
        /// <summary>
        /// Indicates if the contact is an employee
        /// </summary>
        public bool IsEmployee { get; set; }
        /// <summary>
        /// Indicates if the contact is a partner
        /// </summary>
        public bool IsPartner { get; set; }
        /// <summary>
        /// Indicates if the contact is a customer
        /// </summary>
        public bool IsCustomer { get; set; }
        /// <summary>
        /// Indicates if the contact is a supplier
        /// </summary>
        public bool IsSupplier { get; set; }
        /// <summary>
        /// Indicates if the contact is a contractor. This is important if you need to use the Taxable payment reporting feature.
        /// </summary>
        public bool IsContractor { get; set; }
        /// <summary>
        /// Indicates if the contact is a user
        /// </summary>
        public bool IsUser { get; set; }
        /// <summary>
        /// Indicates the list of tags associated with this contact
        /// </summary>
        public string Tags { get; set; }
        /// <summary>
        /// The type of sale trading terms (if any). Available values are: Unspecified= null/0, Due In = 1, Due in End of month plus # days = 2, Cash on delivery = 3
        /// </summary>
        public Nullable<byte> SaleTradingTermsType { get; set; }
        /// <summary>
        /// The sale trading terms interval value (if any)
        /// </summary>
        public Nullable<int> SaleTradingTermsInterval { get; set; }
        /// <summary>
        /// The sale trading terms inerval value type. Available values are: Unspecified = null/0, Day = 1, Week = 2, Month = 3, CashOnDelivery = 4, Year = 5
        /// </summary>
        public Nullable<byte> SaleTradingTermsIntervalType { get; set; }
        /// <summary>
        /// The type of purchase trading terms (if any). Available values are: Unspecified= null/0, Due In = 1, Due in End of month plus # days = 2, Cash on delivery = 3
        /// </summary>
        public Nullable<byte> PurchaseTradingTermsType { get; set; }
        /// <summary>
        /// The purchase trading terms interval value (if any)
        /// </summary>
        public Nullable<int> PurchaseTradingTermsInterval { get; set; }
        /// <summary>
        /// The purchase trading terms inerval value type. Available values are: Unspecified = null/0, Day = 1, Week = 2, Month = 3, CashOnDelivery = 4, Year = 5
        /// </summary>
        public Nullable<byte> PurchaseTradingTermsIntervalType { get; set; }
        /// <summary>
        /// Amount of default discount on sales for this contact as a percentage
        /// </summary>
        public Nullable<decimal> DefaultSaleDiscount { get; set; }
        /// <summary>
        /// Amount of default discount on purchases for this contact as a percentage
        /// </summary>
        public Nullable<decimal> DefaultPurchaseDiscount { get; set; }
        /// <summary>
        /// The user id of the last person to modify this contact record.
        /// </summary>
        public Nullable<int> LastModifiedByUserId { get; set; }

        public override string ModelKeyValue()
        {
            return Id.ToString();
        }

    }

    /// <summary>
    /// A list of contact records
    /// </summary>
    public class ContactResponse : BaseModel, IApiResponseCollection
    {
        public ContactResponse()
        {
            Contacts = new List<Contact>();
        }
        /// <summary>
        /// A list of contact records
        /// </summary>
        public List<Contact> Contacts { get; set; }

        public IEnumerable<BaseModel> ListCollection()
        {
            return Contacts.AsEnumerable<BaseModel>();
        }

        public override string ModelKeyValue()
        {
            return string.Empty;
        }
    }
}
